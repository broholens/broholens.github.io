<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://broholens.github.io</id>
    <title>zz</title>
    <updated>2020-07-20T16:21:54.012Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://broholens.github.io"/>
    <link rel="self" href="https://broholens.github.io/atom.xml"/>
    <subtitle>这些都需要被记录</subtitle>
    <logo>https://broholens.github.io/images/avatar.png</logo>
    <icon>https://broholens.github.io/favicon.ico</icon>
    <rights>All rights reserved 2020, zz</rights>
    <entry>
        <title type="html"><![CDATA[人类简史]]></title>
        <id>https://broholens.github.io/post/gsJOcOPhl/</id>
        <link href="https://broholens.github.io/post/gsJOcOPhl/">
        </link>
        <updated>2020-07-20T15:55:55.000Z</updated>
        <content type="html"><![CDATA[<p>作者：尤瓦尔·赫拉利</p>
<p><strong>第一章   人类：一种也没什么特别的动物</strong></p>
<p>物种和属：</p>
<pre><code>同一物种：彼此交配，且能够产出下一代。马和驴
同一属：同一祖先演化而来的不同物种。狮子和老虎
</code></pre>
<p>大脑：</p>
<pre><code>人类大脑明显大于其他动物；大脑结构脆弱，消耗能量惊人。
</code></pre>
<p>直立行走：</p>
<pre><code>于是人类的手开始能够处理非常精细的任务，特别是能够生产、使用复杂的工具。
使妇女产道宽度受限...自然选择使生产提前，与其他动物相比，人类都是早产儿，许多重要器官发育不够完善。
</code></pre>
<p>社交的来源：</p>
<pre><code>独自一人的母亲拖着孩子难以获取足够的食物。
</code></pre>
<p>人类崛起：</p>
<pre><code>直到十万年前智人崛起，人类才一跃居于食物链顶端。
人类转眼就登上顶端，不仅让生态系统猝不及防，就连人类自己也不知所措。
人类历史的众多灾难，无论是生灵涂炭的战争还是生态遭遇的浩劫，其实都源自这场过于仓促的地位跳跃。
</code></pre>
<p>使用火：</p>
<pre><code>杀死寄生虫和病菌、所需要咀嚼和消化的时间也能大幅减少。
烹饪技术的发展与人体肠道缩短、大脑开始发育有直接关系。
</code></pre>
<p>其他人种的灭绝：</p>
<pre><code>“替代理论”比“混种繁衍理论”更加政治正确。
现实的生物界限并不是非黑即白，而是由重要的灰色地带。
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[牢笼]]></title>
        <id>https://broholens.github.io/post/2_HUa5MT3/</id>
        <link href="https://broholens.github.io/post/2_HUa5MT3/">
        </link>
        <updated>2020-07-19T08:55:32.000Z</updated>
        <content type="html"><![CDATA[<p>我困在一个牢笼里，这个牢笼像甜甜圈做成的，兜兜转转，是原点。</p>
<p>实不相瞒，我曾尝试过千万次挣脱这个牢笼，结果只是徒劳。5月23日，我拖了地，把马桶盖和洗手池擦得锃亮；床单扔进洗衣机，短袖和袜子手洗了。拉开窗帘打开窗，看着远处的秦岭——黑色的山，上面点缀着几片云——有一种声音在胸腔呼之欲出：我会跟从前不一样的！</p>
<p>结果？结果就是这个周末，做完上面的事情后，我盯着冠捷显示屏，用varmilo键盘敲下这些字。我又走了一圈。我又将重新开始。</p>
<p>在之前的很长时间里，我都无法跳出去，所以便开始为这个牢笼正名。正名是这个世界上最扯淡的事情，你只需要自说自话，或者说自欺欺人。什么自由啦、生活啦、现在的年轻人啦、大不了啦、无所谓啦，只要你想往里加，都可以加进去。从此便过上了一种舒适且心安的日子：早上慌忙起床上班，上着扯来扯去的班，写着毫无意义的代码，用生命打一局又一局的游戏，躺在床上和手机里。</p>
<p>但又开始察觉到不对劲了，因为某天有人在我耳旁说了一句：不能再这么吊儿郎当了。尽管知道这话不是说给我听的，但既然听到了，就从脑子里过了一遍。发现自己不仅上有二老、有婚要结，还有房贷要还。我想，如果他还要继续说的话，下一句一定是：你要好好挣钱攒钱。不可否认，这句话是不过时且正确的。既然是正确的，我就该做点儿事情，于是我决定换个发型，以此作为标志性事件，方便后人传颂。同时立马回家卸载了游戏，开始翻看几个月前的令人费解的老旧代码，并买了几本关于人类的书。</p>
<p>关于这次改变，结果是令人沮丧的。但值得欣慰的是，那几本尚未拆封的书送人也不赖。</p>
<p>经历过上次的失败，我清楚了这样的改变微不足道，未来一定会有一场大的变动，大到可以打破这牢笼。于是在变动未发生之前，我便开始了期待。其中的一个版本是这样的：我经历了某种大的祸患，比如车祸，小了上不了台面，须是那种断胳膊断腿的。说实话，每当想到这里的时候我都会兴奋异常，因为我坚信，我的人生将从此改变——无论是好是坏。</p>
<p>但后来我认识到这样的幻想是不负责任的，因为我是个受引用的变量——有人还在依赖我——尽管我非常清楚：没有谁离不开谁，人们会伤心一小会儿，毕竟祥林嫂是小说里的人物。换句话说，我得想个其他改变的方式。可是我现在编不下去了，所以有时间再更新。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[发布包到PyPI]]></title>
        <id>https://broholens.github.io/post/P5yl4XkPx/</id>
        <link href="https://broholens.github.io/post/P5yl4XkPx/">
        </link>
        <updated>2020-06-16T15:20:34.000Z</updated>
        <content type="html"><![CDATA[<h2 id="前提">前提：</h2>
<ul>
<li>已在<a href="https://pypi.org/account/register/">PyPI</a>上注册账号</li>
<li>github上已准备好待发布包</li>
</ul>
<h1 id="方案一手动执行">方案一：手动执行</h1>
<ul>
<li>已安装twine、wheel等包  <code>pip install twine wheel</code></li>
</ul>
<h3 id="发布流程">发布流程</h3>
<ol>
<li><strong>编写setup.py</strong>，可参考<a href="https://github.com/navdeep-G/setup.py">此项目</a>或<a href="https://github.com/broholens/pyfunctions">此项目</a></li>
<li><strong>打包并上传至PyPI</strong>，执行<code>setup.py upload</code>，需要输入PyPI账号及密码。</li>
</ol>
<h1 id="方案二github-actions">方案二：GitHub Actions</h1>
<p>GitHub Actions提供持续集成能力，可以用来在每次push/release时，自动打包并上传到PyPI。<br>
入门请查看<a href="http://www.ruanyifeng.com/blog/2019/09/getting-started-with-github-actions.html">阮一峰的博客</a></p>
<h3 id="操作步骤">操作步骤</h3>
<h5 id="step-1-进入项目点击actions">Step 1: 进入项目，点击“Actions”</h5>
<figure data-type="image" tabindex="1"><img src="https://broholens.github.io/post-images/1592395665956.png" alt="" loading="lazy"></figure>
<h5 id="step-2创建workflow">Step 2：创建workflow</h5>
<p><img src="https://broholens.github.io/post-images/1592395792642.png" alt="" loading="lazy"><br>
<img src="https://broholens.github.io/post-images/1592395990636.png" alt="" loading="lazy"></p>
<h5 id="step-3配置pypi_username及pypi_password">Step 3：配置PYPI_USERNAME及PYPI_PASSWORD</h5>
<figure data-type="image" tabindex="2"><img src="https://broholens.github.io/post-images/1592396117747.png" alt="" loading="lazy"></figure>
<p>这样每次在release的时候，就会自动打包并上传到PyPI了。</p>
<p>🚦 上传成功后如果pip使用非PyPI源需要等一段同步时间，方可使用<code>pip install</code>下载；或更改pip源为PyPI下载。eg：<code>pip install pyfunctions==2020.6.17.11.52.7 -i https://pypi.python.org/simple</code></p>
<h3 id="thanks-to">Thanks To</h3>
<ol>
<li><a href="https://yq.aliyun.com/articles/644640">bdist_wheel报错</a></li>
<li><a href="https://help.github.com/en/actions/language-and-framework-guides/github-actions-for-python">github-actions-for-python</a></li>
</ol>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[python faker]]></title>
        <id>https://broholens.github.io/post/8iPAZ5DIt/</id>
        <link href="https://broholens.github.io/post/8iPAZ5DIt/">
        </link>
        <updated>2020-06-12T12:15:37.000Z</updated>
        <content type="html"><![CDATA[<p>faker提供伪造数据，包括但不限于手机号、地址、user-agent、isbn、身份证号(ssn)、信用卡信息、文章段落<br>
具体可以参考<a href="https://faker.readthedocs.io/en/stable/providers.html#">官方文档</a></p>
<h3 id="faker实现逻辑">faker实现逻辑</h3>
<ul>
<li>faker含有很多providers，每个provider用于提供一类fake数据。<br></li>
<li>faker支持多种语言，所以每类fake数据均有多种不同语言的provider类。<br></li>
<li>调用时首先通过proxy.py解析locale，支持在初始化时指定多个locale，然后将其他参数映射到factory.py生成faker对象，映射过程中会通过指定/默认locale加载指定/全部的providers。<br></li>
<li>每类fake数据都会提供一个Provider类(继承自BaseProvider)，这个Provider类提供本类数据的操作方法(如address类的city方法)，每种语言都会继承此Provider类，数据均来自于每种语言的__init__.py中。<br>
<br></li>
</ul>
<h3 id="示例">示例</h3>
<ul>
<li>基本示例</li>
</ul>
<pre><code class="language-python">&gt;&gt;&gt; from faker import Faker
&gt;&gt;&gt; fake = Faker(locale=&quot;zh_CN&quot;)
&gt;&gt;&gt; fake.name_female()
'石红'
&gt;&gt;&gt; fake.name_male()
'郭飞'
&gt;&gt;&gt; fake.phone_number()
'13273633376'
&gt;&gt;&gt; fake.safe_email()
'kzhu@example.net'
&gt;&gt;&gt; fake.sentence()
'是否孩子事情公司解决.'
</code></pre>
<ul>
<li>创建自己的provider</li>
</ul>
<pre><code class="language-python">from faker import Faker
fake = Faker()

# first, import a similar Provider or use the default one
from faker.providers import BaseProvider

# create new provider class
class MyProvider(BaseProvider):
    def foo(self):
        return 'bar'

# then add new provider to faker instance
fake.add_provider(MyProvider)

# now you can use:
fake.foo()
# 'bar'
</code></pre>
<ul>
<li>使用指定单词创建sentence</li>
</ul>
<pre><code class="language-python">from faker import Faker
fake = Faker()

my_word_list = [
'danish','cheesecake','sugar',
'Lollipop','wafer','Gummies',
'sesame','Jelly','beans',
'pie','bar','Ice','oat' ]

fake.sentence()
# 'Expedita at beatae voluptatibus nulla omnis.'

fake.sentence(ext_word_list=my_word_list)
# 'Oat beans oat Lollipop bar cheesecake.'
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[python pathlib]]></title>
        <id>https://broholens.github.io/post/RhlpoFTTh/</id>
        <link href="https://broholens.github.io/post/RhlpoFTTh/">
        </link>
        <updated>2020-06-12T12:14:28.000Z</updated>
        <content type="html"><![CDATA[<pre><code class="language-python">&gt;&gt;&gt; from pathlib import Path
&gt;&gt;&gt; p = Path('.')

# 列举目录
&gt;&gt;&gt; [x for x in p.iterdir() if x.is_dir()]
[WindowsPath('.idea'), WindowsPath('__pycache__')]

# 列举文件
&gt;&gt;&gt; list(p.glob('**/*.py'))
[WindowsPath('debugger.py'), WindowsPath('ssh_connection.py'), WindowsPath('util.py'), WindowsPath('__init__.py')]

# 文件归属路径
&gt;&gt;&gt; p.cwd()
WindowsPath('D:/ODAEDebugger/backend')

# 文件绝对路径
&gt;&gt;&gt; p.resolve()
WindowsPath('D:/ODAEDebugger/backend/util.py')

# 文件/路径是否存在
&gt;&gt;&gt; p.exists()
True

# 是否是路径
&gt;&gt;&gt; p.is_file()
True

# 文件/路径stat
&gt;&gt;&gt; p.stat()
os.stat_result(st_mode=33206, st_ino=13510798882280617, st_dev=1245727358, st_nlink=1, st_uid=0, st_gid=0, st_size=112, st_atime=1590832618, st_mtime=1590738985, st_ctime=1590738985)

# 文件后缀与文件名
&gt;&gt;&gt; p.name
'util.py'
&gt;&gt;&gt; p.suffix
'.py'
&gt;&gt;&gt; p.stem
'util'

# 读写文件  函数内部已使用with open封装
&gt;&gt;&gt; p.read_text()
&quot;import json\n\n\ndef load_json_file(file_path):\n    with open(file_path, 'r')as f:\n        return json.load(f)&quot;
&gt;&gt;&gt; p.write_text('aaa')
3
&gt;&gt;&gt; p.read_text()
'aaa'
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[127.0.0.1、localhost、0.0.0.0]]></title>
        <id>https://broholens.github.io/post/6387ia0vK/</id>
        <link href="https://broholens.github.io/post/6387ia0vK/">
        </link>
        <updated>2020-06-11T10:37:55.000Z</updated>
        <content type="html"><![CDATA[<h2 id="127001">127.0.0.1</h2>
<p>属于环回地址，环回地址：所有发往该类地址的数据包都应该被loop back。<br><br>
使用这个地址发送数据，则数据包不会出现在网络传输过程中。</p>
<h4 id="用途">用途</h4>
<ul>
<li>测试某台机器上的网络设备，操作系统或者TCP/IP实现是否工作正常：ping 127.0.0.1</li>
</ul>
<h2 id="0000">0.0.0.0</h2>
<ul>
<li>在服务器中，0.0.0.0指的是本机上的所有IPV4地址</li>
<li>在路由中，0.0.0.0表示的是默认路由，即当路由表中没有找到完全匹配的路由的时候所对应的路由。</li>
</ul>
<h4 id="用途-2">用途</h4>
<ul>
<li>如果主机有大小网两个IP，且主机上一个服务监听的地址为0.0.0.0，则两个IP均可访问该服务。</li>
</ul>
<h2 id="localhost">localhost</h2>
<p>域名。默认指向127.0.0.1</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[git commit --amend修改commit信息后，push报错]]></title>
        <id>https://broholens.github.io/post/git-commit-amend-xiu-gai-commit-xin-xi-hou-push-bao-cuo/</id>
        <link href="https://broholens.github.io/post/git-commit-amend-xiu-gai-commit-xin-xi-hou-push-bao-cuo/">
        </link>
        <updated>2020-06-10T23:36:00.000Z</updated>
        <content type="html"><![CDATA[<h3 id="情景复现">情景复现</h3>
<p>commit并push到远端的情况下修改commit信息</p>
<ol>
<li><code>git commit -m &quot;commit message here&quot;</code></li>
<li><code>git push</code></li>
<li><code>git commit --amend</code></li>
<li><code>git push</code><br>
报错如下：<br>
<code>hint: Updates were rejected because the tip of your current branch is behind</code></li>
</ol>
<h3 id="解决方式">解决方式：</h3>
<p>上述第4步使用<code>git push -f</code></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Hello Gridea]]></title>
        <id>https://broholens.github.io/post/hello-gridea/</id>
        <link href="https://broholens.github.io/post/hello-gridea/">
        </link>
        <updated>2018-12-11T16:00:00.000Z</updated>
        <summary type="html"><![CDATA[<p>👏  欢迎使用 <strong>Gridea</strong> ！<br>
✍️  <strong>Gridea</strong> 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ...</p>
]]></summary>
        <content type="html"><![CDATA[<p>👏  欢迎使用 <strong>Gridea</strong> ！<br>
✍️  <strong>Gridea</strong> 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ...</p>
<!-- more -->
<p><a href="https://github.com/getgridea/gridea">Github</a><br>
<a href="https://gridea.dev/">Gridea 主页</a><br>
<a href="http://fehey.com/">示例网站</a></p>
<h2 id="特性">特性👇</h2>
<p>📝  你可以使用最酷的 <strong>Markdown</strong> 语法，进行快速创作</p>
<p>🌉  你可以给文章配上精美的封面图和在文章任意位置插入图片</p>
<p>🏷️  你可以对文章进行标签分组</p>
<p>📋  你可以自定义菜单，甚至可以创建外部链接菜单</p>
<p>💻  你可以在 <strong>Windows</strong>，<strong>MacOS</strong> 或 <strong>Linux</strong> 设备上使用此客户端</p>
<p>🌎  你可以使用 <strong>𝖦𝗂𝗍𝗁𝗎𝖻 𝖯𝖺𝗀𝖾𝗌</strong> 或 <strong>Coding Pages</strong> 向世界展示，未来将支持更多平台</p>
<p>💬  你可以进行简单的配置，接入 <a href="https://github.com/gitalk/gitalk">Gitalk</a> 或 <a href="https://github.com/SukkaW/DisqusJS">DisqusJS</a> 评论系统</p>
<p>🇬🇧  你可以使用<strong>中文简体</strong>或<strong>英语</strong></p>
<p>🌁  你可以任意使用应用内默认主题或任意第三方主题，强大的主题自定义能力</p>
<p>🖥  你可以自定义源文件夹，利用 OneDrive、百度网盘、iCloud、Dropbox 等进行多设备同步</p>
<p>🌱 当然 <strong>Gridea</strong> 还很年轻，有很多不足，但请相信，它会不停向前 🏃</p>
<p>未来，它一定会成为你离不开的伙伴</p>
<p>尽情发挥你的才华吧！</p>
<p>😘 Enjoy~</p>
]]></content>
    </entry>
</feed>